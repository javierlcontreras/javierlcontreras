[show] Well... I guess it's too late for that now.

[waving] Hi! I'm the guy with a torus t-shirt and welcome to "I ignored everyone's advice and started to work on my dream game without any previous experience because I thought I would be special". "the log 1". "A video six months on the making".

[down] You see, I really like mine craft and, let's face it, so do all of you. But you know what sucks in mine craft? Circles and spheres. What is this? This looks terrible and it is so painful to build. Many have tried to solve this problem from inside the matrix but today we settle this issue once and for all. I have spent the last few weeks building a mine craft clone from scratch using Unity but with a twist: the world in my game is actually shaped like our real world, a sphere. You shut up. In my game, you can do this, take that, more gang.

[pointingup] But hold on hold on. How is it possible that you can make a perfect sphere using cubes? I'm glad you asked. The truth is that these box cells that comprise my game's world are not really cubes. They have a small amount of distortion that makes them form a spherical layer around the world. For the nerds among you, I will now explain how the geometry of my game works. If computational geometry is not something that scratches your interests, you can skip to the minute on screen to see the results. 

[thumbsup] Alright then, let's talk math. How the hell is this implemented? 

[pointingup] First, you start with a cube and divide each face into squares. Then, using some simple math, you can inflate the cube into a sphere and you get a nice tiling of the sphere with square tiles. You can now do this to each layer of your planet like an onion and connect the tiles into box cells. The problem with this method is that your box cells will grow in size the further away you are from the center of the sphere. This looks and feels very bad. To solve this, my code checks every time that a cube would be wider than 2 meters and splits it in 4. 

[vertical] This seems nice and simple but it adds quite a few complications... In the plane, the local coordinates of a block inside a chunk translate into the coordinates of the block in the world via a simple addition. This is very convenient because, if you are given a block, it is very easy to know what the blocks to your sides are. This is very important because, for optimization purposes, you only want to render the faces that are visible, which are those in contact with air. Another perk of the plane world is that given a point in the world, it is very easy and efficient to compute the block that is closest to that point. This is needed for implementing the mining and building mechanics.

[pointingup] Both of these things are way harder in my spherical version. In my implementation, I have chosen to set local coordinates in the following way. Each block has 4 coordinates. The first one, "side" encodes the side of the original square where the block is and it can be a number from zero to five. Then the other three, x,y,z encode its position on that side. The tricky part is that, when the block is on the edge of the side, one of its adjacencies will be on another side, and finding out its local coordinates is not a simple addition. Also, given a point somewhere in global coordinates, it is not trivial to efficiently discover which block was closest to it. If you are interested on the precise mathematics on how to perform these computations efficiently, leave a comment and I might do a follow up.

[down] Ok, back to game development. Let's do a speedrun of other things I added. First, I played with using textures and trying some real light rendering and some realistic atmosphere. But I didn't like it... So I rolled back to my original minimalistic textures that I drew in 3 minutes on the very first day. Which one do you like better? Then, I implemented mining, building and a really simple UI. After that, I got excited and I implemented some simple biomes and caves and... the moon. Lastly, an invisible feature that I added was a save system, so that you can save your nice constructions for the next day you play. I am currently working on adding a local multiplayer so you can explore this amazing world with your friends. 

[pointingup] And of course, having built all of this system. My first question was: Can I make a cube? In the same way that in mine craft you can approximate a sphere using blocks, in my game you should be able to construct a cube using my deformed box cells. I was very curious on how that would look (and to be fair I also wanted to please the you tube algorithm with a catchy title). So here it is: a cube in spherical mine craft. 

[show] Cool cool cool cool cool. But why the hell am I doing this? Good question... Initially, I started working on this project because it is kind of my dream game. 

[down] My initial vision for this project was to build a space exploration game like OuterWilds but where the planets are fully editable using a box cell engine. I wanted to manually create a few planets, structures and NPCs such that the universe was filled with interesting content to explore with your friends. But... after these weeks of hard work I have realized that this is not a realistic scope, at least for me, a solo hobbyist developer.

[thumbsup] I really enjoyed working on this project. If you want to know more about how the game works, feel free to ask in the comment section, I'll answer every question. Also... I'll release a playable demo of this game if this video reaches 200 likes. 

[waving] See you later.